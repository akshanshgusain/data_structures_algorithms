1. Create a Graph, print it
2. Implement BFS algorithm. (Queue)
3. Implement DFS Algo. (Recursion Calls, Same as trees)
4. Implement Topological Sort using DFS/Kahn's. ------(Technique: cal. use stack in DFS and in-degree in BFS)
14. Minimum time taken by each job to be completed given by a Directed Acyclic Graph. ------(Technique: Topo sort)
15. Find whether it is possible to finish all tasks or not from given dependencies. ------(Technique: Topo Sort)
17. Given a sorted Dictionary of an Alien Language, find order of characters. ------(Technique: Construct Graph and run topo sort)
5. Detect Cycle in Directed Graph using BFS/DFS Algo
6. Detect Cycle in UnDirected Graph using BFS/DFS Algo
7. Rat in a maze ------(Technique: Make DFS Calls in 4 dirs and backtrack)
8. Minimum Step by Knight. ------(Technique: BFS)
9. flood fill algo. ------(Technique: BFS)
10. Clone a graph. ------(Technique: BFS+MAP)
12. word Ladder. ------(Technique: BFS)
13. Dijkstra algo.


18. Implement Bellman Ford Algorithm
19. Implement Floyd warshall Algorithm

20. Disjoint Set Union DS | Union by Rank and Path Compression
11. Making wired Connections. ------(Technique: DFS or Union Find, find Disconnected Components)
16. Find the no. of Islands. ------(Technique: DFS, find Disconnected Components / DSU )

21. Implement Kruksal’sAlgorithm
22. Implement Prim’s Algorithm
23. Total no. of Spanning tree in a graph (Kirchhoff's theorem) n^(n-2)
24. Travelling Salesman Problem.  ------(Technique: DP: Min weight permutation.)
25. Graph Colouring Problem (No Adjacent Nodes should not be of same colors).
26. Snake and Ladders Problem.
27. Find bridge in a graph.(Tarjan's Algorithm)  ------(Technique: DFS: Check for minimumTime and InsertionTime (BackEdges))<T>
28. Find Articulation point/Cut-Vertex in a graph.(Tarjan's Algorithm)  ------(Technique: DFS: Check for back Edges)
29. Count Strongly connected Components(Kosaraju Algo)
30. Check whether a graph is Bipartite or Not.  ------(Technique: NO odd length cycle | BFS with COLOR vector.)
31. Detect Negative cycle in a graph.  ------(Technique: BellmanFord)
32. The Longest path in a Directed Acyclic Graph.  ------(Technique: Topological sort)
33. Journey to the Moon.  ------(Technique: DFS)
34. Cheapest Flights Within K Stops.  ------(Technique: Priority Queue + Tuple)
35. Oliver and the Game.  ------(Technique: Euler Tour)
36. Water Jug problem using BFS.
37. Find if there is a path of more than k length from a source.   ------(Technique: Backtracking + DFS)
38. M-ColouringProblem.   ------(Technique: BFS)
39. Minimum edges to reverse to make path from source to destination.   ------(Technique: Add opposite Edges with weight=1, and run Dijkastra)
40. Paths to travel each nodes using each edge(Seven Bridges).   ------(Technique: Euler Circuit)
41. Vertex Cover Problem.
42. Chinese Postman or Route Inspection.    ------(Technique: Euler Circuit)
43. Number of Triangles in a Directed and Undirected Graph.    ------(Technique: Run 3 loops)
44. Minimise the cash flow among a given set of friends who have borrowed money from each other.    ------(Technique: Greedy)
45. Two Clique Problem.    ------(Technique: Transpose then Bipartite).

47. Print Euler path in an undirected graph.
48. Print Euler path in a directed graph.(Hierholzer's Algorithm)
49. Cycle Detection with Union Find.



BFS -

1. O(n+m) time, where n is number of vertices and m is the number of edges.
2. The input graph can be directed or undirected, it does not matter to the algorithm.
3. The path found by breadth first search to any node is the shortest path to that node,
i.e. the path that contains the smallest number of edges in unweighted graphs.

Applications of BFS:
4. Find the shortest path from a source to other vertices in an unweighted graph.
5. Find all connected components in an undirected graph in O(n+m) time.
6. Finding a solution to a problem or a game with the least number of moves,
if each state of the game can be represented by a vertex of the graph, and the transitions
from one state to the other are the edges of the graph.
7. Finding the shortest cycle in a directed unweighted graph.
8. Find all the edges that lie on any shortest path between a given pair of vertices (a,b).
9. Find all the vertices on any shortest path between a given pair of vertices (a,b).
10. Find the shortest path of even length from a source vertex s to a target vertex t in an unweighted graph.



DFS -

1. O(m+n) time, where n is the number of vertices and m is the number of edges.
2. Classification of Edges of a graph:
   We can classify the edges using the entry and exit time of the end nodes u and v of the edges (u,v).
   These classifications are often used for problems like finding bridges and finding articulation points.
    2.1. If v is not visited: Tree Edge, If v is visited after u then edge (u,v) is called a tree edge.
    2.2. If v is visited before u:
        2.2.1. Back edges - If v is an ancestor of u, then the edge (u,v) is a back edge
        2.2.2. Forward Edges - If v is a descendant of u, then edge (u,v) is a forward edge
        2.2.3. Cross Edges: if v is neither an ancestor or descendant of u, then edge (u,v) is a cross edge
    Note: Forward edges and cross edges only exist in directed graphs.

Applications of DFS:
1. Find any path in the graph from source vertex u to all vertices.
2. Find lexicographical first path in the graph from source u to all vertices.
3. Check if a vertex in a tree is an ancestor of some other vertex.
4. Find the lowest common ancestor (LCA) of two vertices.
5. Topological sorting.
6. Check whether a given graph is acyclic and find cycles in a graph.
7. Find strongly connected components in a directed graph.
8. Find bridges in an undirected graph.



Directed Acyclic Graph (DAG) -

1. Has Directed edges and no cycles.

In-Degree -
    Number of edges ends at a vertex.


Out-Degree -
    Number of edges with v as the initial vertex.






Topological Sorting -

1. Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for
every directed edge u v, vertex u comes before v in the ordering.
2. Topological Sorting for a graph is not possible if the graph is not a DAG.
3. Topological Sorting is mainly used for scheduling jobs from the given dependencies among jobs.
4. Vertices with the least number of dependencies goes in the stack last.





Dijkstra Algorithm -

1. Single source shortest path.
2. You are given a directed or undirected weighted graph with n vertices and m edges.
3. The weights of all edges are non-negative.
4. You are also given a starting vertex s.





Bellman-Ford Algorithm -

1.  Single source shortest path with NEGATIVE weight edges.
2.  Suppose that we are given a weighted DIRECTED(no negative  cycle) graph G with n vertices and m edges, and some
    specified vertex v.You want to find the length of shortest paths from vertex v to every other vertex.

3.  Why not undirected graphs?

    Any undirected graph is also a directed graph.
    But don't forget, that this also means any edge with a negative weight will count as a loop. As the Bellman-Ford
    algorithm ONLY works on graphs that don't contain any cycles with negative weights this actually means your
    un-directed graph mustn't contain any edges with negative weight.

4.  Unlike the Dijkstra algorithm, this algorithm can also be applied to graphs containing negative weight edges.
    However, if the graph contains a negative cycle, then, clearly, the shortest path to some vertices may not exist
    (due to the fact that the weight of the shortest path must be equal to minus infinity); however, this algorithm can
    be modified to signal the presence of a cycle of negative weight, or even deduce this cycle.
5.  Detects NEGATIVE CYCLE in a graph.





Floyd-Warshall Algorithm -

1. All source shortest path with NEGATIVE weight edges.
2. No Negative cycles. If there is such a negative cycle, you can just traverse this cycle over and over,
in each iteration making the cost of the path smaller. So you can make certain paths arbitrarily small,
or in other words that shortest path is undefined.
3. Works on both directed and undirected graphs.(obviously, Negative edge on Undirected graph wont work)
4. This algorithm can also be used to detect the presence of NEGATIVE CYCLE. The graph has a negative cycle
if at the end of the algorithm, the distance from a vertex v to itself is negative.





Spanning Tree -

1. Given an undirected and connected graph, a spanning tree of the graph is a tree that includes all the Vertices
of the graph.
2. Spanning tree has all the V vertices has V-1 Edges.
3. Every vertex is accessible from every other vertex.






Minimum Spanning Tree -

1. The cost of the spanning tree is the sum of the weights of all the edges in the tree. There can be many spanning
trees. Minimum spanning tree is the spanning tree where the cost is minimum among all the spanning trees. There also
can be many minimum spanning trees.
2. Minimum spanning tree has direct application in the design of networks.
It is used in algorithms approximating the travelling salesman problem, multi-terminal minimum cut problem and
minimum-cost weighted perfect matching. Other practical applications are:Cluster Analysis, Handwriting recognition,
Image segmentation.

Given a weighted, undirected graph G with n vertices and m edges. You want to find a spanning tree of this graph
which connects all vertices and has the least weight (i.e. the sum of weights of edges is minimal).
A spanning tree is a set of edges such that any vertex can reach any other by exactly one simple path.
The spanning tree with the least weight is called a minimum spanning tree.
 1. Kruskal's Algorithm   2. Prim's Algorithm.







Disjoint Set Union | DSU | Union Find -

This data structure provides the following capabilities:
1. We are given several elements, each of which is a separate set.
2. A DSU will have an operation to combine any two sets, and it will be able to tell in which set a specific element is.
3. The classical version also introduces a third operation, it can create a set from a new element.
4. Thus the basic interface of this data structure consists of only three operations:
    4.1. make_set(v) - creates a new set consisting of the new element v
    4.2. union_sets(a, b) - merges the two specified sets (the set in which the element a is located, and the set in
    which the element b is located).
    4.3. find_parent(v) - returns the representative (also called leader) of the set that contains the element v.
    This representative is an element of its corresponding set. It is selected in each set by the data structure
    itself (and can change over time, namely after union_sets calls). This representative can be used to check if
    two elements are part of the same set or not. a and b are exactly in the same set, if find_set(a) == find_set(b).
    Otherwise they are in different sets.
5. The data structure allows you to do each of these operations in almost O(1) time on average.
6. 2 Optimizations over DSU:
    1. Path Compression
    2. Union by Rank.
7. Applications:
    1. Connected components in a graph: Formally the problem is defined in the following way:
    Initially we have an empty graph. We have to add vertices and undirected edges, and answer queries of the
    form (a,b) - "are the vertices a and b in the same connected component of the graph?"
    Here we can directly apply the data structure, and get a solution that handles an addition of a vertex or an
    edge and a query in nearly constant time on average.
    Using DSU we can improve the O(mlogn+n2) of Kruskal's Algorithm to O(mlogn).
    2. Search for connected components in an image.
    3. Store additional information for each set.
    4. Compress jumps along a segment / Painting sub-arrays offline.
    5. Support distances up to representative.




Kruskal's Algorithm with Disjoint Set Union -


1. We sort all the edges of the graph in non-decreasing order of weights.
2. Then put each vertex in its own tree (i.e. its set) via calls to the make_set function - it will take a total
of O(N).
3. We iterate through all the edges (in sorted order) and for each edge determine whether the ends belong to
different trees (with two find_set calls in O(1) each).
4. Finally, we need to perform the union of the two trees (sets), for which the DSU union_sets function will be called
- also in O(1).
5. So we get the total time complexity of O(MlogN+N+M) = O(MlogN).


Prim's Algorithm -


1. The minimum spanning tree is built gradually by adding edges one at a time. At first the spanning tree consists
only of a single vertex (chosen arbitrarily).
2. Then the minimum weight edge outgoing from this vertex is selected and added to the spanning tree. After that the
spanning tree already consists of two vertices.
3. Now select and add the edge with the minimum weight that has one end in an already selected vertex
(i.e. a vertex that is already part of the spanning tree), and the other end in an unselected vertex.
4. And so on, i.e. every time we select and add the edge with minimal weight that connects one selected vertex with
one unselected vertex. The process is repeated until the spanning tree contains all vertices
(or equivalently until we have n−1 edges).
5. In the end the constructed spanning tree will be minimal. If the graph was originally not connected, then there
doesn't exist a spanning tree, so the number of selected edges will be less than n−1.



Prim's vs Kruskal's:


-   Kruskal time complexity worst case is O(E log E),this because we need to sort the edges. Prim time complexity worst
    case is O(E log V) with priority queue or even better, O(E+V log V) with Fibonacci Heap. We should use Kruskal when
    the graph is sparse, i.e.small number of edges,like E=O(V),when the edges are already sorted or if we can sort them
    in linear time. We should use Prim when the graph is dense, i.e number of edges is high ,like E=O(V²).
-   If we stop the algorithm in middle prim's algorithm always generates connected tree, but kruskal on the other hand
    can give disconnected tree or forest.






Hamiltonian Cycle -


1. Hamiltonian Path in an undirected graph is a path that visits each vertex exactly once.
2. A Hamiltonian cycle (or Hamiltonian circuit) is a Hamiltonian Path such that there is an
edge (in the graph) from the last vertex to the first vertex of the Hamiltonian Path.



Travelling Salesman Problem -


1. Given a set of cities and distance between every pair of cities, the problem is to find the shortest possible route
that visits every city exactly once and returns to the starting point.
2. The problem is to find a minimum weight HAMILTONIAN Cycle.
3. The problem is a famous NP hard problem. There is no polynomial time know solution for this problem.
4. Two Different Approaches to solve TSP:
 4.1. DP: Calculate cost of every permutation and keep track of minimum cost permutation. Time: O(2^N * N)
 4.2. MST(Approximate Algorithm): The approximate algorithms work only if the problem instance satisfies
      Triangle-Inequality.

        Triangular-Inequality:
        The least distant path to reach a vertex j from i is always to reach j directly from i, rather than through some
        other vertex k (or vertices), i.e., dis(i, j) is always less than or equal to dis(i, k) + dist(k, j).

      Algorithm:

      1) Let 1 be the starting and ending point for salesman.
      2) Construct MST from with 1 as root using Prim’s Algorithm.
      3) List vertices visited in preorder walk of the constructed MST and add 1 at the end.



Bridge -


1. An edge in an undirected connected graph is a bridge iff removing it disconnects the graph.
2. For a disconnected undirected graph, definition is similar, a bridge is an edge removing which increases number
of disconnected components.



Articulation Points (or Cut Vertices) -


1. A vertex in an undirected connected graph is an articulation point (or cut vertex) if removing it
(and edges through it) disconnects the graph.
2. Articulation points represent vulnerabilities in a connected network – single points whose failure would split
the network into 2 or more components. They are useful for designing reliable networks.
3. For a disconnected undirected graph, an articulation point is a vertex removing which increases number of connected
components.




Strongly Connected Components -


1. A directed graph is strongly connected if there is a path between all pairs of vertices.
2. A strongly connected component (SCC) of a directed graph is a maximal strongly connected subgraph.
3. We can find all strongly connected components in O(V+E) time using Kosaraju’s algorithm.







Bipartite Graph:

1. A bi-graph/ Bipartite graph is a graph whose vertices can be divided into 2 disjoint & independent sets U and V
such that every edge connects a vertex in U to a vertex in V.
2. If you can color the graph with only two colors then bi-partition is possible.
3. A bipartite graph can only have even edge length cycle.



Eulerian path -

1. An Eulerian path is a path in a graph that passes through all of its edges exactly once.
2. An Eulerian cycle is a Eulerian path that is a cycle.
3. How to find whether a given graph is Eulerian or not?
The problem is same as following question. “Is it possible to draw a given graph without lifting pencil from
the paper and without tracing any of the edges more than once”.
   Eulerian Path
   An undirected graph has Eulerian Path if following two conditions are true.
   6.1. Same as condition (a) for Eulerian Cycle
   6.2. If zero or two vertices have odd degree and all other vertices have even degree. Note that only one
   vertex with odd degree is not possible in an undirected graph (sum of all degrees is always even in an
   undirected graph)
4. Eulerian Circuit -
   Eulerian Circuit is an Eulerian Path which starts and ends on the same vertex.
5. Eulerian Cycle -
   An undirected graph has Eulerian cycle if following two conditions are true.
   5.1. All vertices with non-zero degree are connected. We don’t care about vertices with zero degree because
   they don’t belong to Eulerian Cycle or Path (we only consider all edges).
   5.2. All vertices have even degree.
6. Semi-Eulerian Path -
   6.1. Every edge is visited once.
   6.2. Start vertex != End vertex.
   6.3. Exactly 2 vertices must have odd degree. (start and end vertex).
7. Note that a graph with no edges is considered Eulerian because there are no edges to traverse.