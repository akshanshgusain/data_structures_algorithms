01. Level Order Traversal / BFS.
02. Reverse Level Order Traversal / BFS.
03. Height of a Binary Tree.   ---(Technique: DFS)
04. Diameter of a Tree.   ---(Technique: Find max. tree height at  every node)
05. In-Order Traversal - Recursive.
06. Pre-Order Traversal - Recursive.
07. Post-Order Traversal - Recursive.
08. Vertical Traversal.
https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/
09. Zig-Zag Traversal of a BTree.   ---(Technique: Alternate BFS)<T>
https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/
10. Moris Traversal(InOrder). Space:  O(1)
11. Boundary traversal of a BTree.
https://leetcode.com/problems/boundary-of-binary-tree/
12. Diagonal Traversal of a BTree.  ---(Technique: Calculate Diagonal Distance(DD); DD remains the same when going right but, increments by one when going left)

Views of a Binary Tree
13. Mirror of a Binary Tree/ Invert a Binary Tree
https://leetcode.com/problems/invert-binary-tree/
14. Left and Right View of a Binary Tree.  ---(technique: Track MAX_LEVEL and CURR_LEVEL)
https://leetcode.com/problems/binary-tree-right-side-view/
15. Bottom View of a Binary Tree.
16. Top View of a Binary Tree.
17. Check if the binary tree is balanced or not (height-balancing).<T>
https://leetcode.com/problems/balanced-binary-tree/

Re - Construction

18. Construct Binary Tree from String with bracket representation.
https://leetcode.com/problems/construct-binary-tree-from-string
19. Check if Binary tree is Sum tree or not.
20. Convert a Tree to sum tree.
21. Flatten the B Tree. (Convert BT to DLL).<T>
22. Construct a Binary Tree from InOrder and PreOrder Traversal. <T>

Re-Configuration

23. Find the minimum # of swaps required to convert a BTree to BST.   ---(Technique: inorder traversal of Binary Search Tree is in increasing order of their value.)
24. Check if all leaf nodes are at the same level.
25. Check if a binary tree is subtree of another binary tree. ---(Technique: The idea is based on the fact that inorder and preorder/postorder uniquely identify a binary tree).
26. Check if a Binary Tree contains duplicate subtrees of size 2 or more. ---(Technique: Serialization and hashing).
27. Check if two BTrees are mirror of each other. ---(Technique: Their root node’s key must be same, Left subtree of root of ‘a’ and right subtree root of ‘b’ are mirror,
Right subtree of ‘a’ and left subtree of ‘b’ are mirror.).
28. Sum of nodes on the longest path from root to leaf node.

Implementation

30. Check if the a given graph(undirected) is a tree or not. ---(Technique: 1) There is no cycle. 2) The graph is connected.)
31. Find Largest subtree sum in a binary tree.
32. Maximum sum of nodes in Binary tree such that no two are adjacent.  ---(Technique: (Memoization) We can solve this
    problem by considering the fact that both node and its children can’t be in sum at the same time, so when we take a
    node into our sum we will call recursively for its grandchildren or if we don’t take this node then we will call for
    all its children nodes and finally we will choose maximum from both of the results. )

33. Print all k-sum paths in a binary tree. ---(Technique: preorder traversal and keep track of path)
34. Print all the paths from root, with a specified sum in Binary tree.  ---(Technique: preorder traversal and keep track of path)

Common Ancestors:

35. Find the Lowest Common Ancestor in a BTree.
36. Find distance between two nodes of a Binary Tree.<T> ---(Technique: Find the LCA and distance).
37. Kth ancestor of a node in binary tree.
38. Find all duplicates in a binary tree. ---(Technique: do InOrder Traversal and store visited trees in hashMap)
39. Check if the two trees are Isomorphic.














Binary Tree:

A tree whose elements have at most 2 children is called a binary tree. Since each element in a binary
tree can have only 2 children, we typically name them the left and right child.

Types of Binary Trees:

1. Full Binary Tree:  A Binary Tree is a full binary tree if every node has 0 or 2 children.

2. Complete Binary Tree: A Binary Tree is a Complete Binary Tree if all the levels are completely filled
except possibly the last level and the last level has all keys as left as possible.
              18
           /       \
         15         30
        /  \        /  \
      40    50    100   40


               18
           /       \
         15         30
        /  \        /  \
      40    50    100   40
     /  \   /
    8   7  9

3. Perfect Binary Tree: A Binary tree is a Perfect Binary Tree in which all the internal nodes have two
children and all leaf nodes are at the same level.
 => L = I + 1 Where L = Number of leaf nodes, I = Number of internal nodes.
 => A Perfect Binary Tree of height h (where the height of the binary tree is the longest path from the root node
    to any leaf node in the tree, height of root node is 1) has 2h – 1 node.

4. Balanced Binary Tree: A binary tree is balanced if the height of the tree is O(Log n) where n is the number of
nodes.
For Example, the AVL tree maintains O(Log n) height by making sure that the difference between the heights of the
left and right subtrees is at most 1. Red-Black trees maintain O(Log n) height by making sure that the number of
Black nodes on every root to leaf paths is the same and there are no adjacent red nodes. Balanced Binary Search
trees are performance-wise good as they provide O(log n) time for search, insert and delete.

    - Height-Balanced Binary Tree:
        An empty tree is height-balanced. A non-empty binary tree T is balanced if:
        1) Left subtree of T is balanced
        2) Right subtree of T is balanced
        3) The difference between heights of left subtree and right subtree is not more than 1.

Diameter of a Binary Tree : Longest Path between any 2 nodes. This path does not need to pass via the root of the tree.




Tree Traversal

Unlike linked lists, one-dimensional arrays, and other linear data structures, which are traversed in linear order,
trees can be traversed in multiple ways:

1. DFS:
    - PreOrder Traversal
    - InOrder Traversal
    - PostOrder Traversal
2. BFS:
    - LevelOrder Traversal
3. Vertical Traversal:
    -            1
              /    \
             2      3
            / \    / \
           4   5  6   7
                   \   \
                    8   9


      The output of print this tree vertically will be:
      4
      2
      1 5 6
      3 8
      7
      9
    - https://media.geeksforgeeks.org/wp-content/cdn-uploads/print-binary-tree-in-vertical-order.png

4. Zig Zag Traversal:
    print odd levels -> left to right
    print even levels -> right to left

5. Diagonal Traversal:
    - https://media.geeksforgeeks.org/wp-cntent/uploads/d1-1.png
    - Consider lines of slope -1 passing between nodes.
    - Diagonal increase when going left.
    - Diagonal remains the same when going right.

6. Boundary Traversal





If you are given two traversal sequences, can you construct the binary tree?


- It depends on what traversals are given. If one of the traversal methods is Inorder then the tree can be constructed,
  otherwise not.
- Therefore, following combination can uniquely identify a tree.

  Inorder and Preorder.
  Inorder and Postorder.
  Inorder and Level-order.

  And following do not.
  Postorder and Preorder.
  Preorder and Level-order.
  Postorder and Level-order.

  For example, Preorder, Level-order and Postorder traversals are same for the trees given in above diagram.

  Preorder Traversal = AB
  Postorder Traversal = BA
  Level-Order Traversal = AB

  So, even if three of them (Pre, Post and Level) are given, the tree can not be constructed.





Tree Isomorphism

- Two trees are called isomorphic if one of them can be obtained from other by a series of flips, i.e. by swapping
  left and right children of a number of nodes. Any number of nodes at any level can have their children swapped.
- Two empty trees are isomorphic.