Reverse a String.   ----- ( technique: 2 pointer)
Check whether a String is Palindrome or not.   ----- ( technique: 2 pointer)
Find Duplicate characters in a string.   ----- ( technique: Hashing or Map)
Why strings are immutable in Java?
Write a Code to check whether one string is a rotation of another.    ----- ( technique: 2 pointer)
Write a Program to check whether a string is a valid shuffle of two strings or not.    ----- ( technique: 2 pointer)
Count and Say problem.     ----- ( technique: 2 pointer)
Write a program to find the longest Palindrome in a string.[ Longest palindromic Substring] ( technique: 2 pointer)/ can also be done with DP
Print all Subsequences of a string.     ----- ( technique: LCS, Find in DP)
Print all the permutations of the given string.     ----- ( technique: 1. Reccur for left and right sub part, 2. BackTracking)
Split the Binary string into two substring with equal 0’s and 1’s.
Word Wrap Problem [VERY IMP].     ----- ( technique: Dynamic Programming)
EDIT Distance [Very Imp].     ----- ( technique: LCS, Find in DP)
Find next greater number with same set of digits. [Very Very IMP].     ----- ( technique: Descending order)
Balanced Parenthesis problem.[Imp]     ----- ( technique: Stack)
Word break Problem[ Very Imp]     ----- ( technique: DP)
Rabin Karp Algo     ----- ( technique: Rolling Hash)
KMP Algo
Convert a Sentence into its equivalent mobile numeric keypad sequence.     ----- ( technique: store sequence for each char)
Minimum number of bracket reversals needed to make an expression balanced.     ----- ( technique: maintain counts for L and R brackets)
Count All Palindromic Subsequence in a given String.     ----- ( technique: Find in DP)
Search a Word in a 2D Grid of characters.
Count of number of given string in 2D character array
Boyer Moore Algorithm for Pattern Searching. (SKIP)
Converting Roman Numerals to Decimal
Longest Common Prefix
Number of flips to make binary string alternate.     ----- ( technique: Flip Expected value)
Find the first repeated word in string.     ----- ( technique: Hashing)
Minimum number of swaps for bracket balancing.(Repeated)
Find the longest common subsequence between two strings.     ----- ( technique: Find in DP)
Program to generate all possible valid IP addresses from given  string.     ----- ( technique: BFS Traversal)
Write a program to find the smallest window that contains all characters of string itself.     ----- ( technique: Sliding Window + Hashing)
Find the smallest window in a string containing all characters of another string.     ----- ( technique: Sliding Window + Hashing)
Rearrange characters in a string such that no two adjacent are same.     ----- ( technique: Heap)
Minimum characters to be added at front to make string palindrome.     ----- ( technique: String.length() - LPS)
Given a sequence of words, print all anagrams together.     ----- ( technique: Hashing)
Recursively remove all adjacent duplicates.
String matching where one string contains wildcard characters.     ----- ( technique: Tab. DP)
Function to find Number of customers who could not get a computer
Transform One String to Another using Minimum Number of Given Operation     ----- ( technique: Find in DP)
Check if two given strings are isomorphic to each other.     ----- ( technique: HashMap)
Recursively print all sentences that can be formed from list of word lists.     ----- ( technique: DFS)




SubString/SubArray: A subarray is a CONTIGUOUS part of array.

Subsequence: A subsequence is a sequence that can be derived from another sequence by zero or more elements,
without changing the ORDER of the remaining elements.

Permutation: A rearrangement of the elements of an ordered list S into a one-to-one correspondence with
S itself. A string of length n has n! permutation. ORDER does not matter.