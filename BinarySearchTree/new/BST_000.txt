01. Find a value in a BST.
https://leetcode.com/problems/search-in-a-binary-search-tree/
02. Find inorder successor and inorder predecessor in a BST.
https://leetcode.com/problems/inorder-successor-in-bst/
03. Deletion of a node in a BST.
https://leetcode.com/problems/delete-node-in-a-bst/
04. Find min and Max value in a BST.
05. Check if the given tree is a BST.
https://leetcode.com/problems/validate-binary-search-tree/
06. Find LCA of 2 Nodes in a BST. (Different from LCA in BTs).
07. Moris Traversal. O(1) Space BST Traversal(In-Order and PreOrder)

conversions/construction

08.Convert a sorted array to BST.
https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/
09.Construct BST from given preorder traversal.
https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/
10.Binary Tree to Binary Search Tree Conversion.
11.Height Balance a BST.
12.Merge Two Balanced Binary Search Trees.  --- Technique: convert BST to array and apply the above concept.

Implementation

13.Find median of a BST in O(1) space. --- Technique: use Moris Traversal.
14.Kth Largest Element in a BST.
15.Kth Smallest Element in a BST.
16.Count pairs from 2 BST whose sum is equal to given value X.<T>  --- Technique: Traverse 1 BST in inc order and 1 BST in dec order and check if their sum is equal to X.
17. Flatten a BST to a sorted List.
18.Count BST nodes that lie inn a given range.
19.Replace every element with the least greater element on its right. (Skip this method use stacks).
20.Given "n" appointments, find the conflicting appointments.
21.Check if a given array can represent Preorder Traversal of Binary Search Tree. --- Technique: Create BST from preorder.
22.Check whether BST contains Dead End or not. ---Technique: check if for any value n, n+1 and n-1 exist.
23. Largest BST in a BT.<T>






Binary Search tree (BST) Deletion:

- When we delete a node, three possibilities arise.
1) Node to be deleted is the leaf: Simply remove from the tree.

              50                            50
           /     \         delete(20)      /   \
          30      70       --------->    30     70
         /  \    /  \                     \    /  \
       20   40  60   80                   40  60   80
2) Node to be deleted has only one child: Copy the child to the node and delete the child

              50                            50
           /     \         delete(30)      /   \
          30      70       --------->    40     70
            \    /  \                          /  \
            40  60   80                       60   80
3) Node to be deleted has two children: Find inorder successor(Smallest value in the right subtree) of the node. Copy contents of the inorder successor to the node and
delete the inorder successor. Note that inorder predecessor can also be used.

              50                            60
           /     \         delete(50)      /   \
          40      70       --------->    40    70
                 /  \                            \
                60   80                           80


Inorder Successor in a Binary Search Tree (BST):
 - In Binary Tree, Inorder successor of a node is the next node in Inorder traversal of the Binary Tree.
 - Inorder Successor is NULL for the last node in Inorder traversal.
 - Inorder Successor of an input node can also be defined as the node with the smallest key greater than the key of the input node.
 -                          20
                         /     \
                       8        22
                    /    \
                  4       12
                        /    \
                      10      14
 In the above diagram, inorder successor of 8 is 10, inorder successor of 10 is 12 and inorder successor of 14 is 20.





 MISC:
 - An inorder transversal of BST produces a sorted sequence.